load(file = "../output/mat_fac_r3.RData")
q <- result$q
# mu <- read.csv("../output/mu.csv")
# b_user <- read.csv("../output/b_user.csv")
# b_movie <- read.csv("../output/b_movie.csv")
# b_bin <- read.csv("../output/b_bin.csv")
rating <- read.csv("../data/ml-latest-small/ratings.csv")
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
# separate movieId from q dataset
movieID <- colnames(q)
library(dplyr)
library(tidyr)
library(ggplot2)
library(anytime)
library(ggplot2)
library(lubridate)
run_all <- F
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
# Function for dividing time into bins, and add bins to the original data
bins <- function(data = data){
data$date <- anytime(data$timestamp) %>% format("%Y/%m/%d")
df <- data %>% mutate(year = year(date), bin_label = year-1995) %>% data.frame() %>% select(userId, movieId, rating, timestamp, bin_label, date, year)
min_day <- df %>% summarise(as.Date(min(date))) %>% as.numeric()
df <- df %>% mutate(days_diff=as.numeric(as.Date(date)-min_day)+1) %>% group_by(userId) %>% mutate(user_mean_date=mean(days_diff))
return(df)
}
data_bins <- bins(data=data)
index <- sample(1:100000, 5000)
test_idx <- sample(1:5000, 1000)
train_idx <- setdiff(1:5000, test_idx)
data_train <- data_bins[train_idx,]
data_test <- data_bins[test_idx,]
U <- length(unique(data_bins[index,]$userId)) #610
I <- length(unique(data_bins[index,]$movieId)) #9724
source("../lib/Matrix_Factorization_vk.R")
source("../lib/Matrix_Factorization.R")
load(file = "../output/mat_fac_r3.RData")
q <- result$q
rating <- read.csv("../data/ml-latest-small/ratings.csv")
library(krr)
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
# separate movieId from q dataset
movieID <- colnames(q)
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[j]<-sqrt(tMSE/nrow(test.data))}
return(mean(test_rmse))}
lambdas <- c(4.0, 5.0, 6.0)
rmse_tune <- data.frame(lambdas = numeric(), rmse = numeric())
#rmse_tune <- data.frame()
colnames(rmse_tune) <- c("lambda", "rmse")
for (f in 1:length(lambdas)){
m <- cv.krr(data_train, 5, lambdas[f])
rmse_tune <- rbind(rmse_tune, c(lambdas[i], m))
}
lambdas <- c(4.0, 5.0, 6.0)
rmse_tune <- data.frame(lambdas = numeric(), rmse = numeric())
#rmse_tune <- data.frame()
colnames(rmse_tune) <- c("lambda", "rmse")
for (f in 1:length(lambdas)){
m <- cv.krr(data_train, 5, lambdas[f])
rmse_tune <- rbind(rmse_tune, c(lambdas[f], m))
}
m <- cv.krr(data_train, 5, 2)
library(krr)
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
# separate movieId from q dataset
movieID <- colnames(q)
test_idx <- sample(1:nrow(data_bins), round(nrow(data_bins)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data_bins[train_idx,]
data_test <- data_bins[test_idx,]
U <- length(unique(data_bins$userId)) #610
I <- length(unique(data_bins$movieId)) #9724
library(krr)
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
# separate movieId from q dataset
movieID <- colnames(q)
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[j]<-sqrt(tMSE/nrow(test.data))}
return(mean(test_rmse))}
lambdas <- c(4.0, 5.0, 6.0)
rmse_tune <- data.frame(lambdas = numeric(), rmse = numeric())
#rmse_tune <- data.frame()
colnames(rmse_tune) <- c("lambda", "rmse")
for (f in 1:length(lambdas)){
m <- cv.krr(data_train, 5, lambdas[f])
rmse_tune <- rbind(rmse_tune, c(lambdas[f], m))
}
View(rmse_tune)
colnames(rmse_tune) <- c("lambda", "rmse")
min_rmse <- rmse_tune %>%
filter(rmse == min(rmse))
best_para <- min_rmse[,1]
t0 <- Sys.time()
train_model <- vector(mode="list",length = 610)
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% data_train$movieId[which(data_train$userId == userID)])
train_model[[i]] = krr(t(norm_q[, movie_train_index]), data_train$rating[movie_train_index],best_para)
}
t1 <- Sys.time()
training_time <- t1 - t0
training_time
rmse.fn <- function(data){
error <- 0
for (i in 1:610){
userID = as.character(i)
movie_test_index <- which(movieID %in% data$movieId[which(data$userId == userID)])
xnew <- norm_q[, movie_test_index]
ynew <- predict(train_model[[i]], t(xnew))
ytrue <- data$rating[which(data$userId == userID)]
error <- error + sum((ynew - ytrue)^ 2)
}
return(sqrt(error / nrow(data)))
}
test_rmse <- rmse.fn(data_test)
train_rmse <- rmse.fn(data_train)
test_rmse
train_rmse
View(result)
result[["train_RMSE"]]
library(ggplot2)
RMSE <- data.frame(epochs = seq(10, 100, 10), Training_MSE = result$train_RMSE, Test_MSE = result$test_RMSE) %>% gather(key = train_or_test, value = RMSE, -epochs)
RMSE %>% ggplot(aes(x = epochs, y = RMSE,col = train_or_test)) + geom_point() + scale_x_discrete(limits = seq(10, 100, 10)) + xlim(c(0, 100))
library(dplyr)
library(tidyr)
library(ggplot2)
library(anytime)
library(ggplot2)
library(lubridate)
run_all <- F
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
# Function for dividing time into bins, and add bins to the original data
bins <- function(data = data){
data$date <- anytime(data$timestamp) %>% format("%Y/%m/%d")
df <- data %>% mutate(year = year(date), bin_label = year-1995) %>% data.frame() %>% select(userId, movieId, rating, timestamp, bin_label, date, year)
min_day <- df %>% summarise(as.Date(min(date))) %>% as.numeric()
df <- df %>% mutate(days_diff=as.numeric(as.Date(date)-min_day)+1) %>% group_by(userId) %>% mutate(user_mean_date=mean(days_diff))
return(df)
}
data_bins <- bins(data=data)
index <- sample(1:100000, 5000)
test_idx <- sample(1:5000, 1000)
train_idx <- setdiff(1:5000, test_idx)
data_train <- data_bins[train_idx,]
data_test <- data_bins[test_idx,]
U <- length(unique(data_bins[index,]$userId)) #610
I <- length(unique(data_bins[index,]$movieId)) #9724
source("../lib/Matrix_Factorization_vk.R")
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
source("../lib/cross_validation_vk.R")
f_list <- c(10, 20, 50)
l_list <- seq(-3,-1,1)
f_l <- expand.grid(f_list, l_list)
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/test_rmse_p2.RData")
cat("The RMSE of the train set with Postprocessing (SVD with KNN) is", as.numeric(train_rmse_p2))
cat("The RMSE of the test set with Postprocessing (SVD with KNN) is", as.numeric(test_rmse_p2))
load(file = "../output/mat_fac_r3.RData")
RMSE_r3 <- data.frame(epochs = seq(10, 100, 10),
Training_MSE = result$train_RMSE,
Test_MSE = result$test_RMSE) %>%
gather(key = train_or_test, value = RMSE, -epochs)
table<- data.frame(method = character(), train_rmse = numeric(),test_rmse=numeric())
table<- rbind(table, c('KNN', 1.21, 1.20))
table<- rbind(table, c('Kernel Ridge Regression',1.25,1.32))
View(table)
table<- rbind(table, c('Kernel Ridge Regression',1.25,1.32))
View(result)
View(result)
table<- tibble(method = c('without postprocessing','KNN','Kernel Ridge Regression'), train_rmse = c(0,1.21, 1.25), test_rmse = c(0,1.20, 1.32))
library(dplyr)
table<- tibble(method = c('without postprocessing','KNN','Kernel Ridge Regression'), train_rmse = c(0,1.21, 1.25), test_rmse = c(0,1.20, 1.32))
View(result)
View(table)
result$train_RMSE
load(file = "../output/train_rmse_p2.RData")
result$train_RMSE
result$test_RMSE
table<- tibble(method = c('without postprocessing','KNN','Kernel Ridge Regression'), train_rmse = c(0.50,1.21, 1.25), test_rmse = c(1.06,1.20, 1.32))
View(table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(anytime)
library(ggplot2)
library(lubridate)
run_all <- F
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
# Function for dividing time into bins, and add bins to the original data
bins <- function(data = data){
data$date <- anytime(data$timestamp) %>% format("%Y/%m/%d")
df <- data %>% mutate(year = year(date), bin_label = year-1995) %>% data.frame() %>% select(userId, movieId, rating, timestamp, bin_label, date, year)
min_day <- df %>% summarise(as.Date(min(date))) %>% as.numeric()
df <- df %>% mutate(days_diff=as.numeric(as.Date(date)-min_day)+1) %>% group_by(userId) %>% mutate(user_mean_date=mean(days_diff))
return(df)
}
data_bins <- bins(data=data)
source("../lib/Matrix_Factorization.R")
index <- sample(1:100000, 5000)
test_idx <- sample(1:5000, 1000)
train_idx <- setdiff(1:5000, test_idx)
data_train <- data_bins[train_idx,]
data_test <- data_bins[test_idx,]
U <- length(unique(data_bins[index,]$userId)) #610
I <- length(unique(data_bins[index,]$movieId)) #9724
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
f_list <- c(10, 20, 50)
l_list <- seq(-3,-1,1)
f_l <- expand.grid(f_list, l_list)
run_all<-F
if (run_all){
result_summary <- array(NA, dim = c(4, 10, nrow(f_l)))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function(data_m, K = 3, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary)
})
save(result_summary, file = "../output/rmse.Rdata")
}
if(run_all){
load("../output/rmse.Rdata")
rmse <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])),
train_test = rep(c("Train", "Test"), each = 9),
par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>%
gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
cv.result <- ggplot(rmse, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par)+ggtitle("RMSE of Tuning")
ggsave(plot=cv.result, filename = "cv_result.jpg",height = 100, width = 400, units="mm")
}
#time1 <- Sys.time()
#6.59713 hours
if(run_all){
result_summary <- array(NA, dim = c(4, 10, nrow(f_l)))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function_r3(data_bins[index,], K = 3, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
#print(result_summary_r3)
})
#time2 <- Sys.time()
#time2-time1
save(result_summary, file = "../output/rmse_r3.Rdata")
}
load("../output/rmse_r3.Rdata")
rmse_r3 <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])),
train_test = rep(c("Train", "Test"), each = 9),
par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>%
gather("epoch", "RMSE", -train_test, -par)
rmse_r3$epoch <- as.numeric(gsub("X", "", rmse_r3$epoch))
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par)+ggtitle("RMSE of Tuning")
View(rmse_r3)
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_wrap(~par)+ggtitle("RMSE of Tuning")
load("../output/rmse_r3.Rdata")
rmse_r3 <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])),
train_test = rep(c("Train", "Test"), each = 9),
par = rep(paste("f:", f_l[,1], ", lambda:", 10^f_l[,2]), times = 2)) %>%
gather("epoch", "RMSE", -train_test, -par)
rmse_r3$epoch <- as.numeric(gsub("X", "", rmse_r3$epoch))
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par)+ggtitle("RMSE of Tuning")
load("../output/rmse_r3.Rdata")
rmse_r3 <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])),
train_test = rep(c("Train", "Test"), each = 9),
par = rep(paste("f:", f_l[,1], ", lambda:", 10^f_l[,2]), times = 2)) %>%
gather("epoch", "RMSE", -train_test, -par)
rmse_r3$epoch <- as.numeric(gsub("X", "", rmse_r3$epoch))
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_wrap(~par)+ggtitle("RMSE of Tuning")
load("../output/rmse_r3.Rdata")
rmse_r3 <- data.frame(rbind(t(result_summary[1,,]), t(result_summary[2,,])),
train_test = rep(c("Train", "Test"), each = 9),
par = rep(paste("f:", f_l[,1], ", lambda:", 10^f_l[,2]), times = 2)) %>%
gather("epoch", "RMSE", -train_test, -par)
rmse_r3$epoch <- as.numeric(gsub("X", "", rmse_r3$epoch))
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par)+ggtitle("RMSE of Tuning")
ggplot(rmse_r3, aes(x = epoch, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par)+ggtitle("RMSE of Tuning")
test_idx <- sample(1:nrow(data_bins), round(nrow(data_bins)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data_bins[train_idx,]
data_test <- data_bins[test_idx,]
U <- length(unique(data_bins$userId)) #610
I <- length(unique(data_bins$movieId)) #9724
load(file = "../output/mat_fac_r3.RData")
RMSE_r3 <- data.frame(epochs = seq(10, 100, 10),
Training_MSE = result$train_RMSE,
Test_MSE = result$test_RMSE) %>%
gather(key = train_or_test, value = RMSE, -epochs)
ggplot(RMSE_r3, aes(x = epochs, y = RMSE,col = train_or_test)) +
geom_point() + scale_x_discrete(limits = seq(10, 100, 10)) +
xlim(c(0, 100)) +
ggtitle("RMSE (f=10, lambda=0.1)")
View(RMSE_r3)
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/test_rmse_p2.RData")
print(cat("The RMSE of the train set with Postprocessing (SVD with KNN) is", as.numeric(train_rmse_p2)))
print(cat("The RMSE of the test set with Postprocessing (SVD with KNN) is", as.numeric(test_rmse_p2)))
View(test_rmse_p2)
test_rmse_p2[[1]]
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/test_rmse_p2.RData")
print(cat("The RMSE of the train set with Postprocessing (SVD with KNN) is", train_rmse_p2[[1]]))
print(cat("The RMSE of the test set with Postprocessing (SVD with KNN) is", test_rmse_p2[[1]]))
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/test_rmse_p2.RData")
print(cat("The RMSE of the train set with Postprocessing (SVD with KNN) is", 1.211423))
print(cat("The RMSE of the test set with Postprocessing (SVD with KNN) is", 1.201936))
load(file = "../output/train_rmse_p2.RData")
load(file = "../output/test_rmse_p2.RData")
print(paste("The RMSE of the train set with Postprocessing (SVD with KNN) is", 1.211423))
print(paste("The RMSE of the test set with Postprocessing (SVD with KNN) is", 1.201936))
library(ggplot2)
RMSE <- data.frame(epochs = seq(10, 100, 10), Training_MSE = result$train_RMSE, Test_MSE = result$test_RMSE) %>% gather(key = train_or_test, value = RMSE, -epochs)
RMSE %>% ggplot(aes(x = epochs, y = RMSE,col = train_or_test)) + geom_point() + scale_x_discrete(limits = seq(10, 100, 10)) + xlim(c(0, 100))
table<- tibble(method = c('without postprocessing','KNN','Kernel Ridge Regression'), train_rmse = c(0.50,1.21, 1.25), test_rmse = c(1.06,1.20, 1.32))
