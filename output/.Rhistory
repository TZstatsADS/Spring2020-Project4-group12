load("C:/Users/59446/Documents/GitHub/Spring2020-Project4-ads-spring2020-project4-group12/output/mat_fac.RData")
View(result)
if(!require("remotes")){
install.packages("remotes")
}
if(!require("krr")){
remotes::install_github("TimothyKBook/krr")
}
if(!require("tidyverse")){
install.packages("tidyverse")
}
if(!require("caret")){
install.packages("caret")
}
library(tidyverse)
library(krr)
library(caret)
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
p <- read.csv("../output/p.csv")
q <- read.csv("../output/q.csv", header=F)
# mu <- read.csv("../output/mu.csv")
# b_user <- read.csv("../output/b_user.csv")
# b_movie <- read.csv("../output/b_movie.csv")
# b_bin <- read.csv("../output/b_bin.csv")
rating <- read.csv("../data/ml-latest-small/ratings.csv")
View(q)
p <- read.csv("../output/p.csv")
q <- read.csv("../output/q.csv")
# mu <- read.csv("../output/mu.csv")
# b_user <- read.csv("../output/b_user.csv")
# b_movie <- read.csv("../output/b_movie.csv")
# b_bin <- read.csv("../output/b_bin.csv")
rating <- read.csv("../data/ml-latest-small/ratings.csv")
View(q)
load(file = "../output/mat_fac_r3.RData")
View(result)
load(file = "../output/mat_fac_r3.RData")
q <- result$q
# mu <- read.csv("../output/mu.csv")
# b_user <- read.csv("../output/b_user.csv")
# b_movie <- read.csv("../output/b_movie.csv")
# b_bin <- read.csv("../output/b_bin.csv")
rating <- read.csv("../data/ml-latest-small/ratings.csv")
View(q)
q_trans <- t(q[-1,-1])
normal <- function(a){return(a / sqrt(sum(a^2)))}
q_trans_normalized <- apply(q_trans, 2, normal)
rownames(q_trans_normalized) <- 1:nrow(q_trans_normalized)
colnames(q_trans_normalized) <- 1:ncol(q_trans_normalized)
# separate movieId from q dataset
movieId <- as.integer(as.vector(unlist(c(q[1,])))[-1])
#combine movieId with q_trans_normalized dataset
q_trans_normalized <- cbind(movieId, q_trans_normalized)
q_trans_normalized <- as_tibble(q_trans_normalized)
rating_merge <- rating %>%
as_tibble() %>%
left_join(q_trans_normalized, by = c('movieId' = 'movieId')) %>%
mutate(movieId = as.integer(movieId))
rating_merge
View(rating_merge)
View(q)
install.packages("pracma")
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
View(norm_q)
q_trans <- t(q[-1,-1])
normal <- function(a){return(a / sqrt(sum(a^2)))}
q_trans_normalized <- apply(q_trans, 2, normal)
View(q_trans_normalized)
View(norm_q)
library("pracma")
norm_vec <- function(x) {return(x/Norm(x))}
norm_q <- apply(result$q, 2, norm_vec)
# separate movieId from q dataset
movieID <- colnames(q)
#combine movieId with q_trans_normalized dataset
q_trans_normalized <- cbind(movieId, q_trans_normalized)
q_trans_normalized <- as_tibble(q_trans_normalized)
rating_merge <- rating %>%
as_tibble() %>%
left_join(q_trans_normalized, by = c('movieId' = 'movieId')) %>%
mutate(movieId = as.integer(movieId))
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (i in 1:K){
train.data <- dat_train[s != i,]
test.data <- dat_train[s == i,]
MSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
MSE <- MSE + sum((ynew - ytrue)^ 2)
}
test_rmse[i]<-sqrt(MSE/nrow(test.data))}
return(mean(test_rmse))}
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data[train_idx,]
data_test <- data[test_idx,]
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (i in 1:K){
train.data <- dat_train[s != i,]
test.data <- dat_train[s == i,]
MSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
MSE <- MSE + sum((ynew - ytrue)^ 2)
}
test_rmse[i]<-sqrt(MSE/nrow(test.data))}
return(mean(test_rmse))}
cv.krr( data_train,2,4)
dat_train<-data_train
K=2
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
i=1
j=1
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
View(test.data)
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
MSE <- MSE + sum((ynew - ytrue)^ 2)
}
lambda<-4
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
MSE <- MSE + sum((ynew - ytrue)^ 2)
}
userID = as.character(3)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
ynew - ytrue
sum((ynew - ytrue)^2)
MSE <- MSE + sum((ynew - ytrue)^ 2)
MSE
tMSE<-0
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
tMSE
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[i]<-sqrt(MSE/nrow(test.data))}
return(mean(test_rmse))}
cv.krr( data_train,2,4)
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[i]<-sqrt(tMSE/nrow(test.data))}
return(mean(test_rmse))}
cv.krr( data_train,2,4)
View(q)
is.na(q)
View(norm_q)
tMSE<-0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
93061/40334
sqrt(93061/40334)
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[i]<-sqrt(tMSE/nrow(test.data))}
cv.krr <- function(dat_train,K, lambda){
n <- dim(dat_train)[1]
n.fold <- round(n/K, 0)
set.seed(0)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
test_rmse<-rep(0,K)
for (j in 1:K){
train.data <- dat_train[s != j,]
test.data <- dat_train[s == j,]
tMSE <- 0
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% train.data$movieId[which(train.data$userId == userID)])
movie_test_index <- which(movieID %in% test.data$movieId[which(test.data$userId == userID)])
obj <- krr(t(norm_q[, movie_train_index]), train.data$rating[movie_train_index],lambda)
xnew <- norm_q[, movie_test_index]
ynew <- predict(obj, t(xnew))
ytrue <- test.data$rating[which(test.data$userId == userID)]
tMSE <- tMSE + sum((ynew - ytrue)^ 2)
}
test_rmse[j]<-sqrt(tMSE/nrow(test.data))}
return(mean(test_rmse))}
cv.krr( data_train,4,4)
train_model <- vector(mode="list",length = n_users)
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% data_train$movieId[which(data_train$userId == userID)])
train_model[[i]] = krr(t(norm_q[, movie_train_index]), data_train$rating[movie_train_index],best_para)
}
best_para = 2
train_model <- vector(mode="list",length = 610)
for(i in 1:610){
userID = as.character(i)
movie_train_index <- which(movieID %in% data_train$movieId[which(data_train$userId == userID)])
train_model[[i]] = krr(t(norm_q[, movie_train_index]), data_train$rating[movie_train_index],best_para)
}
View(train_model)
rmse.fn <- function(data){
error <- 0
for (i in 1:n_users){
userID = as.character(i)
movie_test_index <- which(movieID %in% data$movieId[which(data$userId == userID)])
xnew <- norm_q[, movie_test_index]
ynew <- predict(train_model[[i]], t(xnew))
ytrue <- data$rating[which(data$userId == userID)]
error <- error + sum((ynew - ytrue)^ 2)
}
return(sqrt(error / nrow(data)))
}
test_rmse <- rmse.fn(data_test)
rmse.fn <- function(data){
error <- 0
for (i in 1:610){
userID = as.character(i)
movie_test_index <- which(movieID %in% data$movieId[which(data$userId == userID)])
xnew <- norm_q[, movie_test_index]
ynew <- predict(train_model[[i]], t(xnew))
ytrue <- data$rating[which(data$userId == userID)]
error <- error + sum((ynew - ytrue)^ 2)
}
return(sqrt(error / nrow(data)))
}
test_rmse <- rmse.fn(data_test)
train_rmse <- rmse.fn(data_train)
test_rmse
train_rmse
